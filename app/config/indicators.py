"""
Configura√ß√µes dos indicadores de tend√™ncia
Arquivo centralizado para gerenciar todos os indicadores dispon√≠veis

GUIA DE CONFIGURA√á√ÉO:
====================

Este arquivo controla como cada indicador t√©cnico funciona no sistema.
Cada indicador pode ser personalizado atrav√©s dos par√¢metros abaixo.

PERFIS DE RISCO RECOMENDADOS:
=============================

üî¥ ALTO RISCO (Agressivo):
- enabled: True para todos
- weight_formula: valores menores (mais sinais)
- validation_rule: menos restritiva

üü° M√âDIO RISCO (Equilibrado):
- enabled: True para BB, EMA, HMA 
- weight_formula: valores padr√£o
- validation_rule: padr√£o

üü¢ BAIXO RISCO (Conservador):
- enabled: True apenas para BB e HMA
- weight_formula: valores maiores (menos sinais)
- validation_rule: mais restritiva

PAR√ÇMETROS EXPLICADOS:
=====================

enabled: True/False - Liga/desliga o indicador
function_name: Nome da fun√ß√£o original no c√≥digo
module: M√≥dulo onde est√° a fun√ß√£o
adapter_class: Classe que adapta a fun√ß√£o ao sistema din√¢mico
params: Par√¢metros passados para o c√°lculo do indicador
weight_formula: Como calcular o peso do indicador no consenso
min_data_points: M√≠nimo de candles necess√°rios
validation_rule: Regra para considerar o indicador v√°lido
display_name: Nome amig√°vel para logs
returns_tuple: Se a fun√ß√£o retorna tupla ou valor √∫nico
result_mapping: Como mapear os valores retornados
"""

# ====================================================================
# CONFIGURA√á√ÉO DOS INDICADORES
# ====================================================================

INDICATOR_CONFIG = {
    # ================================================================
    # BANDAS DE BOLLINGER - Indicador Principal
    # ================================================================
    # Detecta volatilidade e pontos de revers√£o
    # Mais confi√°vel em mercados laterais
    'BB': {
        'enabled': True,                    # ‚úÖ Sempre ativo (principal indicador)
        'function_name': 'should_trade_bollinger',
        'module': 'app.bollinger_analysis',
        'adapter_class': 'BollingerBandsAdapter',
        
        # Par√¢metros do c√°lculo das Bandas de Bollinger
        'params': {
            'window': 10,               # Per√≠odo para m√©dia m√≥vel (padr√£o: 10)
            'window_dev': 1.5          # Multiplicador desvio padr√£o (padr√£o: 1.5)
        },
        
        # Sistema de peso e valida√ß√£o
        'weight_formula': 'strength * 25',     # Alto peso por ser indicador principal
        'weight_max': 25,                      # Peso m√°ximo poss√≠vel
        'min_data_points': 10,                 # M√≠nimo de candles para funcionar
        'validation_rule': 'should_trade and trend not in [None, "SIDEWAYS"]',
        
        # Interface e logs
        'display_name': 'Bollinger Bands',
        'log_format': 'trend={trend}, strength={strength:.3f}, should_trade={should_trade}',
        'returns_tuple': True,                 # Retorna: (should_trade, trend, strength)
        'result_mapping': {
            'should_trade': 0,  # √çndice 0 da tupla
            'trend': 1,         # √çndice 1 da tupla  
            'strength': 2       # √çndice 2 da tupla
        }
    },
    
    # ================================================================
    # EMA TREND - An√°lise de Tend√™ncia por M√©dias Exponenciais
    # ================================================================
    # Detecta dire√ß√£o da tend√™ncia atrav√©s do cruzamento de EMAs
    # Mais eficaz em tend√™ncias claras
    'EMA': {
        'enabled': True,                    # ‚úÖ Ativo (complementar)
        'function_name': 'analyze_ema_trend',
        'module': 'app.trend_analysis',
        'adapter_class': 'EMAAdapter',
        
        # Par√¢metros das m√©dias exponenciais
        'params': {
            'fast_period': 9,           # EMA r√°pida (padr√£o: 9)
            'slow_period': 21          # EMA lenta (padr√£o: 21)
        },
        
        # Sistema de peso - menor que BB
        'weight_formula': '10',             # Peso fixo menor que BB
        'weight_max': 10,
        'min_data_points': 21,              # Precisa da EMA21 completa
        'validation_rule': 'trend not in [None, "SIDEWAYS"]',  # S√≥ RISE/FALL
        
        # Interface
        'display_name': 'EMA Trend',
        'log_format': 'trend={trend}, EMA9={ema9:.5f}, EMA21={ema21:.5f}',
        'returns_tuple': True,              # Retorna: (trend, ema9, ema21)
        'result_mapping': {
            'trend': 0,
            'ema9': 1,
            'ema21': 2
        }
    },
    
    # ================================================================
    # HULL MOVING AVERAGE (HMA) - M√©dia M√≥vel Responsiva
    # ================================================================
    # M√©dia m√≥vel que reduz lag e aumenta suavidade
    # Excelente para confirmar tend√™ncias estabelecidas
    'HMA': {
        'enabled': True,                    # ‚úÖ Ativo (confirma√ß√£o de tend√™ncia)
        'function_name': 'analyze_hma_trend',
        'module': 'app.trend_analysis',
        'adapter_class': 'HMAAdapter',
        
        # Par√¢metros do Hull Moving Average
        'params': {
            'short_period': 21,         # HMA curto (padr√£o: 21)
            'long_period': 100         # HMA longo (padr√£o: 100) - requer 100+ candles
        },
        
        # Sistema de peso - moderado
        'weight_formula': '15',             # Peso fixo moderado
        'weight_max': 15,
        'min_data_points': 100,             # Precisa de 100 candles (HMA100)
        'validation_rule': 'trend not in [None, "SIDEWAYS"]',  # S√≥ RISE/FALL
        
        # Interface
        'display_name': 'Hull Moving Average',
        'log_format': 'trend={trend}',
        'returns_tuple': False,             # Retorna apenas: trend
        'result_mapping': {
            'trend': 'direct'               # Valor direto (n√£o √© tupla)
        }
    },
    
    # ================================================================
    # MICRO TREND - An√°lise de Padr√µes de Curto Prazo
    # ================================================================
    # Detecta micro-tend√™ncias e padr√µes em pequenos per√≠odos
    # √ötil para timing de entrada mais preciso
    'Micro': {
        'enabled': True,                    # ‚úÖ Ativo (timing de entrada)
        'function_name': 'analyze_micro_trend',
        'module': 'app.indicators',         # Arquivo indicators.py original
        'adapter_class': 'MicroTrendAdapter',
        
        # Par√¢metros do micro trend
        'params': {
            'period': 10,                    # Per√≠odo de an√°lise (5 candles)
            'trend_strength_threshold': 0.6  # For√ßa m√≠nima para considerar v√°lido
        },
        
        # Sistema de peso - din√¢mico baseado em for√ßa e confian√ßa
        'weight_formula': 'strength * confidence * 20',  # Peso calculado dinamicamente
        'weight_max': 20,
        'min_data_points': 5,               # M√≠nimo de 5 candles
        'validation_rule': 'trend not in [None, "SIDEWAYS"]',  # S√≥ RISE/FALL
        
        # Interface
        'display_name': 'Micro Trend',
        'log_format': 'trend={trend}, strength={strength:.3f}, confidence={confidence:.3f}, pattern={pattern}',
        'returns_tuple': False,             # Retorna dict completo
        'result_mapping': {
            'trend': 'trend',               # Chave 'trend' do dict
            'strength': 'strength',         # Chave 'strength' do dict
            'confidence': 'confidence',     # Chave 'confidence' do dict
            'pattern': 'pattern',           # Chave 'pattern' do dict
            'momentum': 'momentum'          # Chave 'momentum' do dict
        }
    }
}

# ====================================================================
# CONFIGURA√á√ïES DO SISTEMA DE CONSENSO
# ====================================================================
# Controla como os indicadores "votam" para gerar o sinal final

CONSENSUS_CONFIG = {
    # Quantos indicadores precisam concordar
    'min_indicators': 2,                    # üéØ AJUST√ÅVEL: 2=mais sinais, 3+=menos sinais

    # Porcentagem de concord√¢ncia necess√°ria
    'consensus_threshold': 0.6,             # üéØ AJUST√ÅVEL: 60% de concord√¢ncia
    
    # B√¥nus de confian√ßa
    'max_bonus_percentage': 40,             # M√°ximo 40% de b√¥nus na confian√ßa final
    
    # Regras especiais
    'require_bb_consensus': False,          # üéØ AJUST√ÅVEL: Se BB deve sempre estar no consenso
    'allow_sideways': False                 # N√£o permite tend√™ncia SIDEWAYS no consenso final
}

# ====================================================================
# CONFIGURA√á√ïES POR PERFIL DE RISCO
# ====================================================================

# üî¥ PARA ALTO RISCO - Descomente e ajuste:
# CONSENSUS_CONFIG['min_indicators'] = 2
# CONSENSUS_CONFIG['consensus_threshold'] = 0.5
# CONSENSUS_CONFIG['require_bb_consensus'] = False

# üü° PARA M√âDIO RISCO - Configura√ß√£o atual (padr√£o)
# CONSENSUS_CONFIG['min_indicators'] = 2
# CONSENSUS_CONFIG['consensus_threshold'] = 0.6
# CONSENSUS_CONFIG['require_bb_consensus'] = False

# üü¢ PARA BAIXO RISCO - Descomente e ajuste:
# CONSENSUS_CONFIG['min_indicators'] = 3
# CONSENSUS_CONFIG['consensus_threshold'] = 0.75
# CONSENSUS_CONFIG['require_bb_consensus'] = True
# INDICATOR_CONFIG['EMA']['enabled'] = False  # Desabilitar EMA para ser mais conservador
# INDICATOR_CONFIG['Micro']['enabled'] = False  # Desabilitar Micro para ser mais conservador

# ====================================================================
# CONFIGURA√á√ïES DE LOGGING
# ====================================================================

LOGGING_CONFIG = {
    'log_calculations': True,               # Log detalhado de c√°lculos dos indicadores
    'log_weights': True,                   # Log de pesos calculados para cada indicador
    'log_validation': True,                # Log de valida√ß√µes (por que indicador foi aceito/rejeitado)
    'log_errors': True                     # Log de erros durante processamento
}

def get_enabled_indicators():
    """
    Retorna apenas os indicadores habilitados
    
    Returns:
        dict: Dicion√°rio com indicadores habilitados
    """
    return {name: config for name, config in INDICATOR_CONFIG.items() 
            if config.get('enabled', False)}

def get_indicator_config(name: str):
    """
    Retorna configura√ß√£o de um indicador espec√≠fico
    
    Args:
        name: Nome do indicador
        
    Returns:
        dict: Configura√ß√£o do indicador ou None se n√£o existir
    """
    return INDICATOR_CONFIG.get(name)

def update_indicator_status(name: str, enabled: bool):
    """
    Atualiza status de um indicador
    
    Args:
        name: Nome do indicador
        enabled: Se deve estar habilitado ou n√£o
    """
    if name in INDICATOR_CONFIG:
        INDICATOR_CONFIG[name]['enabled'] = enabled
        return True
    return False

def get_consensus_config():
    """
    Retorna configura√ß√µes de consenso
    
    Returns:
        dict: Configura√ß√µes de consenso
    """
    return CONSENSUS_CONFIG.copy()
